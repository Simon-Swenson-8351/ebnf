token_lut:
    "a":  char_lower[0]
    "b":  char_lower[1]
    "c":  char_lower[2]
    "d":  char_lower[3]
    "e":  char_lower[4]
    "f":  char_lower[5]
    "g":  char_lower[6]
    "h":  char_lower[7]
    "i":  char_lower[8]
    "j":  char_lower[9]
    "k":  char_lower[10]
    "l":  char_lower[11]
    "m":  char_lower[12]
    "n":  char_lower[13]
    "o":  char_lower[14]
    "p":  char_lower[15]
    "q":  char_lower[16]
    "r":  char_lower[17]
    "s":  char_lower[18]
    "t":  char_lower[19]
    "u":  char_lower[20]
    "v":  char_lower[21]
    "w":  char_lower[22]
    "x":  char_lower[23]
    "y":  char_lower[24]
    "z":  char_lower[25]
    "A":  char_upper[0]
    "B":  char_upper[1]
    "C":  char_upper[2]
    "D":  char_upper[3]
    "E":  char_upper[4]
    "F":  char_upper[5]
    "G":  char_upper[6]
    "H":  char_upper[7]
    "I":  char_upper[8]
    "J":  char_upper[9]
    "K":  char_upper[10]
    "L":  char_upper[11]
    "M":  char_upper[12]
    "N":  char_upper[13]
    "O":  char_upper[14]
    "P":  char_upper[15]
    "Q":  char_upper[16]
    "R":  char_upper[17]
    "S":  char_upper[18]
    "T":  char_upper[19]
    "U":  char_upper[20]
    "V":  char_upper[21]
    "W":  char_upper[22]
    "X":  char_upper[23]
    "Y":  char_upper[24]
    "Z":  char_upper[25]
    "1":  char_digit_non_zero[0]
    "2":  char_digit_non_zero[1]
    "3":  char_digit_non_zero[2]
    "4":  char_digit_non_zero[3]
    "5":  char_digit_non_zero[4]
    "6":  char_digit_non_zero[5]
    "7":  char_digit_non_zero[6]
    "8":  char_digit_non_zero[7]
    "9":  char_digit_non_zero[8]
    "0":  char_digit[1]
    " ":  char_whitespace[0]
    "\f": char_whitespace[1]
    "\n": char_whitespace[2]
    "\r": char_whitespace[3]
    "\t": char_whitespace[4]
    "\v": char_whitespace[5]

non_terminal_lut:
    char_lower: char_alpha[0]
    char_upper: char_alpha[1]
    char_alpha: {tok_id[0][1], tok_id[1][1]}
    char_digit_non_zero: {char_digit[0], tok_nat_num[0][1][0]}
    char_digit: {tok_nat_num[0][1][1], tok_id[1][2]}
    char_whitespace: {tok_nat_num[1], tok_plus[1], tok_minus[1], tok_mul_div[1], tok_exp[1], tok_paren_l[1], tok_paren_r[1], tok_id[2], text[0]}
    char_underscore: {tok_id[0][0], tok_id[1][0]}
    tok_nat_num: int[1]
    tok_plus: expr[0][1][0]
    tok_minus: {int[0], expr[0][1][1]}
    tok_mul_div: expr_non_add[0][1]
    tok_exp: expr_non_mul[0][1]
    tok_paren_l: expr_non_exp[0][1]
    tok_paren_r: expr_non_exp[0][3]
    tok_id: expr_non_exp[0][0]
    int: expr_non_exp[1]
    text: 
    expr: {text[1], expr[0][0], expr[0][2], expr_non_exp[0][2]}
    expr_non_add: {expr[1], expr_non_add[0][0], expr_non_add[0][2]}
    expr_non_mul: {expr_non_add[1], expr_non_mul[0][0], expr_non_mul[0][2]}
    expr_non_exp: {expr_non_mul[1]}

example expression processing:

"25 / 4"

Begin the character processing.
Consider "2".
    "2": char_digit_non_zero[1]
Begin the tree generation.
Consider char_digit_non_zero[1] and construct as big of a tree as we can.
char_digit_non_zero top level expr is a choice expr, satisfied by char_digit_non_zero[1], so a new sub-tree can be made 
with root char_digit_non_zero.
Consider char_digit_non_zero.
    char_digit_non_zero: {char_digit[0], tok_nat_num[0][1][0]}
For char_digit[0]:
    char_digit top level expr is a choice expr, satisified by char_digit[0] with root char_digit.
    Consider char_digit.
        char_digit: {tok_nat_num[0][1][1], tok_id[1][2]}
    For tok_nat_num[0][1][1]:
        We need to determine if tok_nat_num[0][1][1] is a valid start to tok_nat_num.
    For tok_id[1][2]:
For tok_nat_num[0][1][0]:
