(* PEMDAS
   Parentheses
   Exponentiation
   Multiplication & Division
   Addition & Subtraction
*)

char_lower          = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | 
                      "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
char_upper          = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | 
                      "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
char_alpha          = char_lower | char_upper ;
char_digit_non_zero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
char_digit          = char_digit_non_zero | "0" ;
char_whitespace     = " " | "\f" | "\n" | "\r" | "\t" | "\v" ;
char_underscore     = "_" ;

tok_nat_num        = ("0" | char_digit_non_zero , {char_digit}) , {char_whitespace} ;
tok_neg            = ("-" | "neg") , {char_whitespace} ;
tok_add            = ("+" | "add") , {char_whitespace} ;
tok_sub            = ("-" | "sub") , {char_whitespace} ;
tok_mul            = ("*" | "mul") , {char_whitespace} ;
tok_div            = ("/" | "div") , {char_whitespace} ;
tok_exp            = ("^" | "exp") , {char_whitespace} ;
tok_paren_l        = "(" , {char_whitespace} ;
tok_paren_r        = ")" , {char_whitespace} ;
tok_sqrt           = "sqrt" , {char_whitespace} ;
tok_sin            = "sin" , {char_whitespace} ;
tok_cos            = "cos" , {char_whitespace} ;
tok_tan            = "tan" , {char_whitespace} ;
tok_invsin         = "invsin" , {char_whitespace} ;
tok_invcos         = "invcos" , {char_whitespace} ;
tok_invtan         = "invtan" , {char_whitespace} ;
tok_comma          = "," , {char_whitespace} ;

int = [tok_neg] , tok_nat_num ;
func_name = tok_sqrt | tok_sin | tok_cos | tok_tan | tok_invsin | tok_invcos | tok_invtan ;

text         = {char_whitespace} , expr ;
expr         = expr         , (tok_add | tok_sub) , expr         | expr_non_add ;
expr_non_add = expr_non_add , (tok_mul | tok_div) , expr_non_add | expr_non_mul ;
expr_non_mul = expr_non_mul , tok_exp             , expr_non_mul | expr_non_exp ;
expr_non_exp = expr_paren | expr_func | int ;
expr_paren   = tok_paren_l , expr , tok_paren_r ;
expr_func    = func_name , tok_paren_l , expr , {tok_comma , expr} , tok_paren_r ;
