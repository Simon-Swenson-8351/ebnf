(As part of parsing the ebnf file) Collect strings and note where they appear. Note in the below table, the values are 
location indicators (see vocab file).
    " ": char_whitespace[0]
    "\f": char_whitespace[1]
    "\n": char_whitespace[2]
    "\r": char_whitespace[3]
    "\t": char_whitespace[4]
    "a": char_alpha[0]
    "b": char_alpha[1]
    "c": char_alpha[2]
    "d": char_alpha[3]
    "e": char_alpha[4]
    "f": char_alpha[5]
    "g": char_alpha[6]
    "h": char_alpha[7]
    "i": char_alpha[8]
    "j": char_alpha[9]
    "k": char_alpha[10]
    "l": char_alpha[11]
    "m": char_alpha[12]
    "n": char_alpha[13]
    "o": char_alpha[14]
    "p": char_alpha[15]
    "q": char_alpha[16]
    "r": char_alpha[17]
    "s": char_alpha[18]
    "t": char_alpha[19]
    "u": char_alpha[20]
    "v": char_alpha[21]
    "w": char_alpha[22]
    "x": char_alpha[23]
    "y": char_alpha[24]
    "z": char_alpha[25]
    "A": char_alpha[26]
    "B": char_alpha[27]
    "C": char_alpha[28]
    "D": char_alpha[29]
    "E": char_alpha[30]
    "F": char_alpha[31]
    "G": char_alpha[32]
    "H": char_alpha[33]
    "I": char_alpha[34]
    "J": char_alpha[35]
    "K": char_alpha[36]
    "L": char_alpha[37]
    "M": char_alpha[38]
    "N": char_alpha[39]
    "O": char_alpha[40]
    "P": char_alpha[41]
    "Q": char_alpha[42]
    "R": char_alpha[43]
    "S": char_alpha[44]
    "T": char_alpha[45]
    "U": char_alpha[46]
    "V": char_alpha[47]
    "W": char_alpha[48]
    "X": char_alpha[49]
    "Y": char_alpha[50]
    "Z": char_alpha[51]
    "0": char_digit[0]
    "1": char_digit[1]
    "2": char_digit[2]
    "3": char_digit[3]
    "4": char_digit[4]
    "5": char_digit[5]
    "6": char_digit[6]
    "7": char_digit[7]
    "8": char_digit[8]
    "9": char_digit[9]
    "a": char_digit_hex[1]
    "A": char_digit_hex[2]
    "b": char_digit_hex[3]
    "B": char_digit_hex[4]
    "c": char_digit_hex[5]
    "C": char_digit_hex[6]
    "d": char_digit_hex[7]
    "D": char_digit_hex[8]
    "e": char_digit_hex[9]
    "E": char_digit_hex[10]
    "f": char_digit_hex[11]
    "F": char_digit_hex[12]
    "_": char_under
    "0": natural_number[0]
    "0x": natural_int_hex[0][0]
    "0X": natural_int_hex[0][1]
    "-": natural_int_dec[0]
    ".": natural_float_hex[1][0]
    "p": natural_float_hex[2][0][0]
    "P": natural_float_hex[2][0][1]
    "+": natural_float_hex[2][1][0]
    "-": natural_float_hex[2][1][1]
    ".": natural_float_dec[1][0]
    "e": natural_float_dec[2][0][0]
    "E": natural_float_dec[2][0][1]
    "+": natural_float_hex[2][1][0]
    "-": natural_float_hex[2][1][1]
    any_char: short_char_any_double[0][0]
    "\\\"": short_char_any_double[1]
    any_char: short_char_any_single[0][0]
    "\\'": short_char_any_single[1]
    "\"": short_literal_string[0][0]
    "\"": short_literal_string[0][2]
    "'": short_literal_string[1][0]
    "'": short_literal_string[1][2]
    "[": long_literal_string_inner[0]
    "]": long_literal_string_inner[2]
    "=": long_literal_string_mid[0][0]
    "=": long_literal_string_mid[0][2]
    "[": long_literal_string[0]
    "]": long_literal_string[2]
    ";": stat[0]
    "=": stat[1][1]
    "break": stat[4]
    "goto": stat[5][0]
    "do": stat[6][0]
    "end": stat[6][2]
    "while": stat[7][0]
    "do": stat[7][2]
    "end": stat[7][4]
    "repeat": stat[8][0]
    "until": stat[8][2]
    "if": stat[9][0]
    "then": stat[9][2]
    "elseif": stat[9][4][0]
    "then": stat[9][4][2]
    "else": stat[9][5][0]
    "end": stat[9][6]
    "for": stat[10][0]
    "=": stat[10][2]
    ",": stat[10][4]
    ",": stat[10][6][0]
    "do": stat[10][7]
    "end": stat[10][9]
    "for": stat[11][0]
    "in": stat[11][2]
    "do": stat[11][4]
    "end": stat[11][6]
    "function": stat[12][0]
    "local function": stat[13][0]
    "local": stat[14][0]
    "=": stat[14][2][0]
    ",": attnamelist[2][0]
    "<": attrib[0]
    ">": attrib[2]
    "return": retstat[0]
    ";": retstat[2]
    "::": label[0]
    "::": label[1]
    ".": funcname[1][0]
    ":": funcname[2][0]
    ",": varlist[1][0]
    "[": var[1][1]
    "]": var[1][3]
    ".": var[2][1]
    ",": namelist[1][0]
    ",": explist[1][0]
    "nil": exp[0]
    "false": exp[1]
    "true": exp[2]
    "...": exp[5]
    "(": prefixexp[2][0]
    ")": prefixexp[2][2]
    ":": functioncall[1][1]
    "(": args[0][0]
    ")": args[0][2]
    "function": functiondef[0]
    "(": funcbody[0]
    ")": funcbody[2]
    "end": funcbody[4]
    ",": parlist[0][1][0]
    "...": parlist[0][1][1]
    "...": parlist[1]
    "{": tableconstructor[0]
    "}": tableconstructor[2]
    "[": field[0][0]
    "]": field[0][2]
    "=": field[0][3]
    "=": field[1][1]
    ",": fieldsep[0]
    ";": fieldsep[1]
    "+": binop[0]
    "-": binop[1]
    "*": binop[2]
    "/": binop[3]
    "//": binop[4]
    "^": binop[5]
    "%": binop[6]
    "&": binop[7]
    "~": binop[8]
    "|": binop[9]
    ">>": binop[10]
    "<<": binop[11]
    "..": binop[12]
    "<": binop[13]
    "<=": binop[14]
    ">": binop[15]
    ">=": binop[16]
    "==": binop[17]
    "~=": binop[18]
    "and": binop[19]
    "or": binop[20]
    "-": unop[0]
    "not": unop[1]
    "#": unop[2]
    "~": unop[3]

Consider input beginning at index 0, starting with 'l'.
